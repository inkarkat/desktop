#!/bin/bash

# XXX: Unfortunately, there's no API to clear all notifications, and currently
# active notifications cannot be queried; we'd have to monitor the submission
# and record their IDs (as modifying all clients to record their own
# notifications' IDs is not possible, either).
# Fortunately, it appears that IDs are monotonically increasing (since login?),
# so we can just try to clear a range of IDs, starting from the last one we saw,
# and then record the highest seen number as the starting point for the next
# invocation.
: ${CLEARNOTIFICATIONS_RANGE:=100}

printUsage()
{
    cat <<HELPTEXT
Clear all (recent) desktop notifications.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-?|-h|--help]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
esac
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

notificationCall()
{
    gdbus call \
	    --session \
	    --dest org.freedesktop.Notifications \
	    --object-path /org/freedesktop/Notifications \
	    "$@"
}

sendDummyNotification()
{
    local -r scriptName="$(basename -- "${BASH_SOURCE[0]}")"
    local dummyOutput="$(notificationCall --method org.freedesktop.Notifications.Notify "$scriptName" 0 utilities-terminal 'Ignore' 'Dummy message; please ignore.' [] {} 0)"
    [[ "$dummyOutput" =~ ^\(uint32\ ([0-9]+),\)$ ]] \
	&& printf %s "${BASH_REMATCH[1]}"
}

let clearedNotificationCnt=0
clearRangeFrom()
{
    local startId="${1:?}"; shift
    local i id
    for ((i = 1; i <= CLEARNOTIFICATIONS_RANGE; i++))
    do
	let id=startId+i
	if notificationCall --method org.freedesktop.Notifications.CloseNotification $id >/dev/null 2>&1; then
	    let clearedNotificationCnt+=1
	    lastNotificationId=$id
	fi
    done

    [ $clearedNotificationCnt -gt 0 ]
}
clearRangeUntil()
{
    local endId="${1:?}"; shift
    let startId=$((endId - CLEARNOTIFICATIONS_RANGE))
    clearRangeFrom $((startId < 0 ? -1 : startId))
}

readonly lastNotificationIdFilespec="${XDG_RUNTIME_DIR:?}/clearNotifications"
lastNotificationId=-1; [ -r "$lastNotificationIdFilespec" ] && < "$lastNotificationIdFilespec" IFS=$'\t' read -r lastNotificationId

if ! clearRangeFrom "$lastNotificationId"; then
    if newId="$(sendDummyNotification)"; then
	case ",${DEBUG:-}," in *,clearNotifications,*) printf >&2 '%sclearNotifications: New ID is %d\n' "$PS4" $newId;; esac
	clearRangeUntil "$newId"
    fi
fi
if [ $clearedNotificationCnt -eq 0 ]; then
    echo >&2 'No notifications found.'
    case ",${DEBUG:-}," in *,clearNotifications,*) printf >&2 '%sclearNotifications: Tried ID range of %d...%d\n' "$PS4" $lastNotificationId $((lastNotificationId + CLEARNOTIFICATIONS_RANGE));; esac

    sendDummyNotification
    exit 99
fi

countPlural=s; [ $clearedNotificationCnt -eq 1 ] && countPlural=
printf 'Cleared %d notification%s.\n' $clearedNotificationCnt "$countPlural"
printf '%d\n' "$lastNotificationId" > "$lastNotificationIdFilespec"
