#!/bin/bash

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 'ERROR: Cannot determine script directory!'; exit 3; }
readonly projectDir="${scriptDir}/.."
readonly etcDir="${projectDir}/etc/$(basename -- "${BASH_SOURCE[0]}")"
readonly templateFilespec="${etcDir}/entry.desktop.template"

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '-e|--exec COMMAND [-n|--name NAME] [-i|--icon ICON] [-c|--comment COMMENT] [-t|--category CATEGORY [-t ...]] [--autostart|-d|--destination DESTINATION-DIR] [-f|--force] DESKTOP-ENTRY [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Create a DESKTOP-ENTRY that launches COMMAND.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --exec|-e COMMAND	Execute COMMAND; for a complete command-line or
			environment variable expansion, wrap in sh -c "COMMAND"
    --name|-n NAME	Use NAME instead of deriving it from COMMAND.
    --icon|-i ICON	Use ICON; if this is a ./FILESPEC (not just a name),
			copy it to user's application icon location and embed
			just the name.
    --comment|-c COMMENT
			Use COMMENT.
    --category|-t CATEGORY
			Add CATEGORY to the categorization.
    --autostart		Put the desktop entry into the autostart directory
			instead of the start menu.
    --destination|-d DESTINATION-DIR
			Place the desktop entry into DESTINATION-DIR.
    --force|-f		Override an existing desktop entry.

RELATED COMMANDS:
- addToStartMenu, addToAutostart, and addDesktopEntry can be used to install an
  existing desktop entry

EXIT STATUS:
    0	Complete success.
    1	A DESKTOP-ENTRY already exists at the destination and no --force was
	given.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
HELPTEXT
}

command=
name=
icon=
comment=
typeset -a categoryList=()
destinationDirspec=~/.local/share/applications
isForce=
autostart=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--exec|-e)	shift; command="$1"; shift;;
	--name|-n)	shift; name="$1"; shift;;
	--icon|-i)	shift; icon="$1"; shift;;
	--comment|-c)	shift; comment="$1"; shift;;
	--category|-t)	shift; categoryList+=("$1"); shift;;
	--autostart)	shift; destinationDirspec=~/.config/autostart; autostart='X-GNOME-Autostart-enabled=true';;
	--destination|-d)
			shift; destinationDirspec="${1:?}"; shift;;
	--force|-f)	shift; isForce=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 1 ]; then
    printUsage "$0" >&2
    exit 2
fi
desktopEntryName="${1:?}"; shift
if [ -z "$command" ]; then
    echo 'ERROR: No -e|--exec COMMAND passed.'
    echo
    printUsage "$0"
    exit 2
fi >&2
[ -n "$name" ] || name="$(commandName --no-interpreter --eval "$command")" || name="$command"

desktopEntryFilespec="${destinationDirspec%/}/${desktopEntryName}.desktop"
if [ -e "$desktopEntryFilespec" ] && [ ! "$isForce" ]; then
    printf >&2 'ERROR: Desktop entry already exists at: %s\n' "$desktopEntryFilespec"
    exit 1
fi

iconFilespec=
if [[ "$icon" =~ / ]]; then
    if [ ! -r "$icon" ]; then
	printf >&2 'ERROR: Icon does not exist at %s\n', "$icon"
	exit 2
    fi
    iconFilespec="$icon"
    icon="$(basename -- "$icon")"
fi

saveIFS="$IFS"
IFS=';'; categories="${categoryList[*]}"
IFS="$saveIFS"

export name comment command icon autostart categories
shelltemplate --target "$desktopEntryFilespec" -- "$templateFilespec" || exit $?

[ -z "$iconFilespec" ] || acceptStatus 0 4 99 -- addIcon --copy ${isForce:+--force} -- "$iconFilespec"
