#!/bin/bash

: ${CREATEDESKTOPENTRY_DEFAULT_ICON=stock_unknown}

readonly scriptDir="$([ "${BASH_SOURCE[0]}" ] && dirname -- "${BASH_SOURCE[0]}" || exit 3)"
[ -d "$scriptDir" ] || { echo >&2 'ERROR: Cannot determine script directory!'; exit 3; }
readonly projectDir="${scriptDir}/.."
readonly etcDir="${projectDir}/etc/$(basename -- "${BASH_SOURCE[0]}")"
readonly templateFilespec="${etcDir}/entry.desktop.template"

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '-e|--exec COMMAND [-n|--name NAME] [-i|--icon ICON] [-c|--comment COMMENT] [-t|--category CATEGORY [-t ...]] [--autostart|-g|--system-wide|-d|--destination DESTINATION-DIR] [-f|--force] [--target-name DESKTOP-ENTRY|DESKTOP-ENTRY] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '-T|--template FILESPEC [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '--check ...'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Create a DESKTOP-ENTRY that launches COMMAND.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --check		Check whether DESKTOP-ENTRY (and ICON) already exist (by
			name, ignoring the contents).
    --template|-T FILESPEC
			Use FILESPEC, either as-is or as a template where other
			arguments add or override certain properties.
    --exec|-e COMMAND	Execute COMMAND; for a complete command-line or
			environment variable expansion, wrap in sh -c "COMMAND"
    --name|-n NAME	Use NAME instead of deriving it from COMMAND.
    --icon|-i ICON	Use ICON; if this is a ./FILESPEC (not just a name),
			copy it to the application icon location and embed just
			the name.
    --comment|-c COMMENT
			Use COMMENT.
    --category|-t CATEGORY
			Add CATEGORY to the categorization.
    --autostart		Put the desktop entry into the autostart directory
			instead of the start menu.
    --system-wide|-g	Install DESKTOP-ENTRY system-wide instead of only for
			the current user. Same for a copied icon, too.
			Will use sudo unless already running as the superuser.
    --destination|-d DESTINATION-DIR
			Place the desktop entry into DESTINATION-DIR.
    --force|-f		Overwrite an existing desktop entry.
    --target-name DESKTOP-ENTRY
			The filename of the desktop entry to be created.

SEE ALSO:
- addToStartMenu, addToAutostart, and addDesktopEntry can be used to install an
  existing desktop entry

EXIT STATUS:
    0	Complete success / DESKTOP-ENTRY already exists.
    1	A DESKTOP-ENTRY already exists at the destination and no --force was
	given / DESKTOP-ENTRY or ICON do not exist yet.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
HELPTEXT
}

readTemplate()
{
    local sourceFilespec="${1:?}"; shift
    if [ ! -r "$sourceFilespec" ]; then
	printf >&2 'ERROR: Cannot read template: %s\n' "$sourceFilespec"
	return 1
    fi

    while IFS='=' read -r key value
    do
	if [[ "$key" =~ ^[[:upper:]][[:lower:]]+$ ]]; then
	    printf -v quotedValue %q "$value"
	    eval "desktop${key}=${quotedValue}" || return 1
	fi
    done < "$sourceFilespec"
}
processIcon()
{
    desktopIcon="${1:?}"; shift
    if [[ "$desktopIcon" =~ / ]]; then
	if [ ! -r "$desktopIcon" ]; then
	    printf >&2 'ERROR: Icon does not exist at %s\n', "$desktopIcon"
	    exit 2
	fi
	iconFilespec="$desktopIcon"
	desktopIcon="$(basename -- "$desktopIcon")"
    fi
}

isSystemWide=
desktopExec=
desktopName=
iconFilespec=
desktopIcon="$CREATEDESKTOPENTRY_DEFAULT_ICON"
typeset -a addIconArgs=()
desktopComment=
desktopCategories=
typeset -a categoryList=()
destinationDirspec=~/.local/share/applications
isForce=
desktopAutostart=
desktopEntryName=
isCheck=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--check)	shift; isCheck=t;;
	--template|-T)	shift; readTemplate "$1" || exit 2; shift;;
	--exec|-e)	shift; desktopExec="$1"; shift;;
	--name|-n)	shift; desktopName="$1"; shift;;
	--icon|-i)	shift; processIcon "$1"; shift;;
	--comment|-c)	shift; desktopComment="$1"; shift;;
	--category|-t)	shift; categoryList+=("$1"); shift;;
	--autostart)	shift; destinationDirspec=~/.config/autostart; desktopAutostart='X-GNOME-Autostart-enabled=true';;
	--system-wide|-g)
			addIconArgs+=("$1"); shift
			isSystemWide=t
			destinationDirspec=/usr/local/share/applications
			[ -d "$destinationDirspec" ] || sudo mkdir -p -- "$destinationDirspec" || exit $?
			;;
	--destination|-d)
			shift; destinationDirspec="${1:?}"; shift;;
	--force|-f)	shift; isForce=t;;
	--target-name)	shift; desktopEntryName="${1:?}"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ -z "$desktopEntryName" -a $# -gt 1 ]; then
    desktopEntryName="${1:?}"; shift
fi
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
fi
[ -n "$desktopName" ] || desktopName="$(commandName --no-interpreter --eval "$desktopExec")" || desktopName="$desktopExec"
: ${desktopEntryName:="${desktopName:?}"}
if [[ "$desktopEntryName" =~ / ]]; then
    echo 'ERROR: DESKTOP-ENTRY must be a pure name, not a path.'
    echo
    printUsage "$0"
    exit 2
elif [ -z "$desktopExec" ]; then
    echo 'ERROR: No -T|--template or -e|--exec COMMAND passed.'
    echo
    printUsage "$0"
    exit 2
fi >&2

targetFilespec="${destinationDirspec%/}/${desktopEntryName%.desktop}.desktop"

if [ "$isCheck" ]; then
    [ -e "$targetFilespec" ] || exit 1
    [ -z "$iconFilespec" ] || addIcon --check "${addIconArgs[@]}" -- "$iconFilespec" || exit 1
    exit 0
elif [ -e "$targetFilespec" ] && [ ! "$isForce" ]; then
    printf >&2 'ERROR: Desktop entry already exists at: %s\n' "$targetFilespec"
    exit 1
fi

saveIFS="$IFS"
IFS=';'; [ -n "$desktopCategories" ] || desktopCategories="${categoryList[*]}"
IFS="$saveIFS"

export ${!desktop@}
if [ "$isSystemWide" ]; then
    shelltemplate -- "$templateFilespec" | sudo tee -- "$targetFilespec" >/dev/null
else
    shelltemplate --target "$targetFilespec" -- "$templateFilespec"
fi || exit $?

[ -z "$iconFilespec" ] || acceptStatus 0 4 99 -- addIcon "${addIconArgs[@]}" --copy ${isForce:+--force} -- "$iconFilespec"
